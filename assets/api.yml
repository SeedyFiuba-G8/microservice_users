openapi: '3.0.0'

# =============================================================================

info:
  title: 'Users Microservice'
  description: >
    Part of the **Seedy FIUBA Project** ([view it on GitHub](https://github.com/orgs/SeedyFiuba-G8/)).
  version: '1.0.0'

# =============================================================================

servers:
  - url: https://sf-tdp2-users.herokuapp.com/
    description: 'Production'
  - url: https://sf-tdp2-users-dev.herokuapp.com/
    description: 'Staging'
  - url: http://localhost:3000/
    description: 'Local development'

# =============================================================================

tags:
  - name: Admins
  - name: Users
  - name: Status

# =============================================================================

paths:
  # USERS
  /users:
    get:
      summary: Get all users
      description: Get info from every user.
      tags:
        - Users
      responses:
        200:
          $ref: '#/components/responses/getAllUsers'
        default:
          $ref: '#/components/responses/Error'

    post:
      summary: Register a new user
      description: Allow users to create a new basic account by email.
      tags:
        - Users
      requestBody:
        $ref: '#/components/requestBodies/postUser'
      responses:
        201:
          $ref: '#/components/responses/postUser'
        default:
          $ref: '#/components/responses/Error'

  /users/session:
    post:
      summary: Log in an user session
      description: Allow users to log in to their account in a new session.
      tags:
        - Users
      requestBody:
        $ref: '#/components/requestBodies/postUserSession'
      responses:
        200:
          $ref: '#/components/responses/postSession'
        default:
          $ref: '#/components/responses/Error'

  /users/{userId}:
    get:
      summary: Get a user's profile
      description: Allow users to retrieve a user's profile by id.
      tags:
        - Users
      parameters:
        - in: path
          name: userId
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the user
      responses:
        200:
          $ref: '#/components/responses/getProfile'
        default:
          $ref: '#/components/responses/Error'

    patch:
      summary: Modify the information of a user's profile
      description: Allows the user to update its information.
      tags:
        - Users
      parameters:
        - in: path
          name: userId
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the user
        - in: header
          name: uid
          schema:
            $ref: '#/components/schemas/Id'
          required: true
      requestBody:
        $ref: '#/components/requestBodies/patchUser'
      responses:
        200:
          description: 'User information updated successfully.'
        default:
          $ref: '#/components/responses/Error'

  # ADMINS
  /admins:
    post:
      summary: Register a new admin
      description: Allows admins to create a new basic account by email.
      tags:
        - Admins
      requestBody:
        $ref: '#/components/requestBodies/postAdmin'
      responses:
        201:
          description: 'Admin was registered successfully.'
        default:
          $ref: '#/components/responses/Error'

  /admins/session:
    post:
      summary: Log in an admin session
      description: Allows admins to log in to their account in a new session.
      tags:
        - Admins
      requestBody:
        $ref: '#/components/requestBodies/postAdminSession'
      responses:
        200:
          $ref: '#/components/responses/postSession'
        default:
          $ref: '#/components/responses/Error'

  # TRANSLATION
  /idtranslation:
    post:
      summary: Translates ids to names
      description: Translates user ids to first and last name
      tags:
        - Users
      requestBody:
        $ref: '#/components/requestBodies/postIdTranslation'
      responses:
        200:
          $ref: '#/components/responses/postIdTranslation'
        default:
          $ref: '#/components/responses/Error'

  /emailtranslation:
    post:
      summary: Translates emails to ids
      description: Translates user emails to ids
      tags:
        - Users
      requestBody:
        $ref: '#/components/requestBodies/postEmailTranslation'
      responses:
        200:
          $ref: '#/components/responses/postEmailTranslation'
        default:
          $ref: '#/components/responses/Error'

  # STATUS
  /ping:
    get:
      tags:
        - Status
      responses:
        200:
          $ref: '#/components/responses/ping'
        default:
          $ref: '#/components/responses/Error'

  /health:
    get:
      tags:
        - Status
      responses:
        200:
          $ref: '#/components/responses/health'
        default:
          $ref: '#/components/responses/Error'

# =============================================================================

components:
  # ---------------------------------------------------------------------------
  requestBodies:
    # USERS
    patchUser:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PatchUserData'

    postUser:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserRegisterData'

    postUserSession:
      required: true
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/LoginData'
              - $ref: '#/components/schemas/FBLoginData'

    # ADMINS
    postAdmin:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AdminRegisterData'

    postAdminSession:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginData'

    # TRANSLATION
    postIdTranslation:
      required: true
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Id'

    postEmailTranslation:
      required: true
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Email'

  # ---------------------------------------------------------------------------
  responses:
    Error:
      description: >
        An error has occured. Check response body for more
        information about what happened.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    # USERS
    getAllUsers:
      description: Users info retrieved successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AllUsers'

    getProfile:
      description: User profile retrieved successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Profile'

    postUser:
      description: 'User was registered successfully.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Id'

    # COMMON
    postSession:
      description: Logged in successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Session'

    # TRANSLATION
    postIdTranslation:
      description: IDs translated successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Names'

    postEmailTranslation:
      description: Emails translated successfully.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Id'

    # STATUS
    health:
      description: Microservice general health state reported.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Health'

    ping:
      description: Server is active.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Ping'

  # ---------------------------------------------------------------------------
  schemas:
    # GENERAL
    Error:
      type: object
      properties:
        status:
          type: integer
        name:
          type: string
        message:
          type: string
        errors:
          type: array
          items:
            type: object
      required:
        - status
        - name

    # TYPES
    Date:
      type: string
      format: date-time
      example: '2021-06-13T21:29:29.330Z'

    Email:
      type: string
      format: email
      example: 'example@email.com'

    FBToken:
      type: string
      example: 'EAAHTZAxeFHeUBACOZArY9H3yMDXtG7NF7K85VGt43keuBxd5LgAUz7gdCKdyyZCVGNGNqMZBy0J6HjlkldhIFm4RZBIPhqN0HSiZAbBvEsNIOIdhkzVmI1x6FWhRBtXORs1fXEyZCnkIPZCZCNVCaxbgisI1WjOyPRmYTCuGIpx014MY0FTYQxBXt7xr25ghdZChywWZAISf1escFnA1vVrBJylBXUEpt29Yvh557Ac0E8QYgZDZD'

    Id:
      type: string
      format: uuid
      example: '123e4567-e89b-12d3-a456-426614174000'

    Picture:
      type: string
      example: 'https://imgur.com/gallery/rFvivtw'

    # USERS
    AllUsers:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
      required:
        - users

    FBLoginData:
      type: object
      properties:
        fbToken:
          $ref: '#/components/schemas/FBToken'
      required:
        - fbToken

    PatchUserData:
      type: object
      properties:
        city:
          type: string
          example: 'Buenos Aires'
        country:
          type: string
          example: 'Argentina'
        interests:
          type: array
          items:
            type: string
          example: ['music', 'entertainment', 'productivity']
        profilePicUrl:
          $ref: '#/components/schemas/Picture'
      minProperties: 1

    Profile:
      type: object
      properties:
        firstName:
          type: string
          example: 'Memis'
        lastName:
          type: string
          example: 'Pomofot'
        banned:
          type: boolean
          example: false
        signupDate:
          $ref: '#/components/schemas/Date'
        city:
          type: string
          example: 'Buenos Aires'
        country:
          type: string
          example: 'Argentina'
        interests:
          type: array
          items:
            type: string
          example: ['music', 'entertainment', 'productivity']
        profilePicUrl:
          $ref: '#/components/schemas/Picture'
      required:
        - firstName
        - lastName
        - banned
        - signupDate
        - city
        - country
        - interests

    User:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        email:
          $ref: '#/components/schemas/Email'
        banned:
          type: boolean
          example: false
        firstName:
          type: string
          example: 'Memis'
        lastName:
          type: string
          example: 'Pomofot'
        signupDate:
          $ref: '#/components/schemas/Date'
      required:
        - id
        - email
        - banned
        - firstName
        - lastName
        - signupDate

    UserRegisterData:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
        password:
          type: string
          example: 'SomePassword123'
        firstName:
          type: string
          example: 'Memis'
        lastName:
          type: string
          example: 'Pomofot'
      required:
        - email
        - password
        - firstName
        - lastName

    # ADMINS
    AdminRegisterData:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
        password:
          type: string
          example: 'SomePassword123'
      required:
        - email
        - password

    # NAMES
    Names:
      type: object
      properties:
        someId:
          type: object
          properties:
            email:
              $ref: '#/components/schemas/Email'
            firstName:
              type: string
              example: 'Memis'
            lastName:
              type: string
              example: 'Pomofot'
          required:
            - email
            - firstName
            - lastName

    # COMMON
    LoginData:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
        password:
          type: string
          example: 'SomePassword123'
      required:
        - email
        - password

    Session:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
      required:
        - id

    # STATUS
    Ping:
      type: object
      properties:
        status:
          type: string
          example: 'ok'
      required:
        - status

    Health:
      type: object
      properties:
        database:
          type: string
          example: 'UP'
      required:
        - database
#
# =============================================================================
