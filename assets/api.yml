openapi: '3.0.0'

# =============================================================================

info:
  title: 'Users Microservice'
  description: >
    Part of the **Seedy FIUBA Project** ([view it on GitHub](https://github.com/orgs/SeedyFiuba-G8/)).
  version: '1.0.0'

# =============================================================================

servers:
  - url: https://sf-tdp2-users.herokuapp.com/
    description: 'Production'
  - url: https://sf-tdp2-users-dev.herokuapp.com/
    description: 'Staging'
  - url: http://localhost:3000/
    description: 'Local development'

# =============================================================================

tags:
  - name: Admins
  - name: Users
  - name: Status

# =============================================================================

paths:
  # USERS
  /user:
    get:
      summary: Get all users
      description: Get info from every user.
      tags:
        - Users
      responses:
        200:
          $ref: '#/components/responses/getAllUsers'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'

    post:
      summary: Register a new user
      description: Allows users to create a new basic account by email.
      tags:
        - Users
      requestBody:
        $ref: '#/components/requestBodies/postUser'
      responses:
        201:
          description: 'User was registered successfully.'
        400:
          $ref: '#/components/responses/400'
        409:
          $ref: '#/components/responses/409'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'

  /user/session:
    post:
      summary: Log in an user session
      description: Allows users to log in to their account in a new session.
      tags:
        - Users
      requestBody:
        $ref: '#/components/requestBodies/postSession'
      responses:
        200:
          $ref: '#/components/responses/postSession'
        400:
          $ref: '#/components/responses/400'
        409:
          $ref: '#/components/responses/409'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'

  # ADMINS
  /admin:
    post:
      summary: Register a new admin
      description: Allows admins to create a new basic account by email.
      tags:
        - Admins
      requestBody:
        $ref: '#/components/requestBodies/postAdmin'
      responses:
        201:
          description: 'Admin was registered successfully.'
        400:
          $ref: '#/components/responses/400'
        409:
          $ref: '#/components/responses/409'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'

  /admin/session:
    post:
      summary: Log in an admin session
      description: Allows admins to log in to their account in a new session.
      tags:
        - Admins
      requestBody:
        $ref: '#/components/requestBodies/postSession'
      responses:
        200:
          $ref: '#/components/responses/postSession'
        400:
          $ref: '#/components/responses/400'
        409:
          $ref: '#/components/responses/409'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'

  # STATUS
  /ping:
    get:
      tags:
        - Status
      responses:
        200:
          $ref: '#/components/responses/ping'
        400:
          $ref: '#/components/responses/400'
        415:
          $ref: '#/components/responses/415'

  /health:
    get:
      tags:
        - Status
      responses:
        200:
          $ref: '#/components/responses/health'
        400:
          $ref: '#/components/responses/400'
        415:
          $ref: '#/components/responses/415'

# =============================================================================

components:
  # ---------------------------------------------------------------------------
  responses:
    # ERRORS
    400:
      description: Bad request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    401:
      description: Unauthorized.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    403:
      description: Forbidden.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    404:
      description: Not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    409:
      description: Conflict.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    415:
      description: Unsupported Media Type.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    500:
      description: Internal Server Error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    # USERS
    getAllUsers:
      description: Users info retrieved successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AllUsers'

    # COMMON
    postSession:
      description: Logged in successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Session'

    # STATUS
    health:
      description: Microservice general health state reported.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Health'

    ping:
      description: Server is active.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Ping'

  # ---------------------------------------------------------------------------
  requestBodies:
    # USERS
    postUser:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserRegisterData'

    # ADMINS
    postAdmin:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AdminRegisterData'

    # COMMON
    postSession:
      required: true
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/LoginData'
              - $ref: '#/components/schemas/FBLoginData'

  # ---------------------------------------------------------------------------
  schemas:
    # GENERAL
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            status:
              type: integer
            name:
              type: string
            message:
              type: string
            errors:
              type: object
            data:
              type: object
          required:
            - status
            - name
      required:
        - error

    # USERS
    AllUsers:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
      required:
        - users

    User:
      type: object
      properties:
        id:
          type: string
          example: 'SomePassword123'
        email:
          type: string
          example: 'memis_pomofot@gmail.com'
        banned:
          type: boolean
          example: false
        firstName:
          type: string
          example: 'Memis'
        lastName:
          type: string
          example: 'Pomofot'
        signupDate:
          type: string
          example: '2021-06-13T21:29:29.340Z'
      required:
        - id
        - email
        - banned
        - firstName
        - lastName
        - signupDate

    UserRegisterData:
      type: object
      properties:
        email:
          type: string
          example: 'memis_pomofot@gmail.com'
        password:
          type: string
          example: 'SomePassword123'
        firstName:
          type: string
          example: 'Memis'
        lastName:
          type: string
          example: 'Pomofot'
      required:
        - email
        - password
        - firstName
        - lastName

    # ADMINS
    AdminRegisterData:
      type: object
      properties:
        email:
          type: string
          example: 'memis_pomofot@gmail.com'
        password:
          type: string
          example: 'SomePassword123'
      required:
        - email
        - password

    # COMMON
    LoginData:
      type: object
      properties:
        email:
          type: string
          example: 'memis_pomofot@gmail.com'
        password:
          type: string
          example: 'SomePassword123'
      required:
        - email
        - password

    FBLoginData:
      type: object
      properties:
        fbToken:
          type: string
          example: 'EAAHTZAxeFHeUBACOZArY9H3yMDXtG7NF7K85VGt43keuBxd5LgAUz7gdCKdyyZCVGNGNqMZBy0J6HjlkldhIFm4RZBIPhqN0HSiZAbBvEsNIOIdhkzVmI1x6FWhRBtXORs1fXEyZCnkIPZCZCNVCaxbgisI1WjOyPRmYTCuGIpx014MY0FTYQxBXt7xr25ghdZChywWZAISf1escFnA1vVrBJylBXUEpt29Yvh557Ac0E8QYgZDZD'
      required:
        - fbToken

    Session:
      type: object
      properties:
        id:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
      required:
        - id

    # STATUS
    Ping:
      type: object
      properties:
        status:
          type: string
          example: 'ok'
      required:
        - status

    Health:
      type: object
      properties:
        database:
          type: string
          example: 'UP'
      required:
        - database
#
# =============================================================================
